#!/bin/bash
#
# ./um-dependencies
# Create a script that lists file dependencies of UMUI basis files.
#
# A script is created because environment variables may be set up differently
# on the local and remote machines. Running the script will produce a list of
# files. Note that even if a file is referenced in a UM basis that file may
# be ignored due to other configuration options.
#
# Intended usage is:
# for file in $(bash <(um-dependencies BASIS)); do
#     if [ -f $file ]; then
#         echo $file
#     fi
# done
# (Substitute the echo as required). The environment should be the same as it
# is when you run the UM.
#
# AUTHORS: 
# Scott Wales <scott.wales@unimelb.edu.au> 
# ARC Centre of Excellence for Climate System Science <climate_help@nf.nci.org.au>
#
# Available at https://github.com/ScottWales/um-utils
#
# ----------------------------------------------------------------------
# Copyright 2012 ARC Centre of Excellence for Climate System Science
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.  You may obtain a copy
# of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations under
# the License.
# ----------------------------------------------------------------------
#

function usage {
    echo "$0: Create a script to list UM file dependencies"
    echo "Usage: $0 INPUTS ... > OUTPUT"
    echo "INPUTS: UM basis files"
    echo "OUTPUT: Shell script that when run lists used files"
}

options=$(getopt --options h --longoptions help -- "$@")
eval set -- "$options"

while true; do
    case "$1" in
        -h|--help)
            usage; exit; shift ;;
        --)
            shift; break ;;
    esac
done

if [ "$#" -lt 1 ]; then
    echo "ERROR: No input" >&2
    usage
    exit 1
fi

# Output script header
echo "#!/bin/bash"
cat << EOF
#
# Displays a list of files referenced in the UM basis files:
# $@
#

EOF

# Find a specific variable in a UM Basis file.
# Usage: basis_var FILE VARIABLE_NAME
#
# Regulare expressions match 
# VAR = ' foo bar '
# VAR = ' one ',
#       ' two ',
#       ' three '
# Leading and trailing spaces are removed from values (internal spaces preserved)
# Matches are done between the variable declaration and the next line not ending with ,
function basis_var {
    file=$1
    var=$2
    # Match only multiple values
    sed -n $file -e '/\<'"$var"'=.*,\s*$/,/[^,]\s*$/s|.*'"'"'\s*\(\S\(.*\S\)\?\)\s*'"'"'\s*,\?\s*$|\1|p'
    # Match only one value
    sed -n $file -e 's|.*\<'"$var"'\s*=\s*'"'"'\s*\(\S\(.*\S\)\?\)\s*'"'"'\s*$|\1|p'
}

# Handle multiple basis files
for file in "$@"; do
    echo "#===================="
    echo "# $file";
    echo "#===================="

    echo "# UMUI Environment variables"
    paste <(basis_var $file ENVAR_NAME) <(basis_var $file ENVAR_VAL) --delimiters="="
    echo

    echo "# List of referenced files"
    echo "cat << EOF"

    # Ancillaries
    paste <(basis_var $file APATH) <(basis_var $file AFILE) --delimiters="/"
    echo

    # Hand edits
    basis_var $file HEDFILE
    echo

    # Stashmaster, User Stash and Stash Prognostics
    paste <(basis_var $file SMDIR) <(echo "STASHmaster_A") --delimiters="/"
    basis_var $file USERLST_A
    basis_var $file USRP_FILE_A
    echo

    # Override files
    basis_var $file UMCOMP_OP
    basis_var $file UFCOMP_OP
    echo

    # Misc files
    # Input Dump
    paste <(basis_var $file PATH21) <(basis_var $file FILE21) --delimiters="/"
    # LBCs
    paste <(basis_var $file PATH95) <(basis_var $file FILE95) --delimiters="/"
    # Radiation
    paste <(basis_var $file PATHSW) <(basis_var $file FILESW) --delimiters="/"
    paste <(basis_var $file PATHSW) <(basis_var $file FILESWD) --delimiters="/"
    paste <(basis_var $file PATHLW) <(basis_var $file FILELW) --delimiters="/"
    paste <(basis_var $file PATHLW) <(basis_var $file FILELWD) --delimiters="/"
    # Vert levels
    paste <(basis_var $file VLEV_PATH) <(basis_var $file VLEV_FILE) --delimiters="/"
    # Random Seed
    paste <(basis_var $file RSEED_PATH) <(basis_var $file RSEED_FILE) --delimiters="/"

    echo "EOF"
    echo
done

